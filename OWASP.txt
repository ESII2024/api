Resumo da Ficha de Truques de Autorização¶

**Introdução**:
Autorização refere-se ao processo de verificar se uma ação ou serviço solicitado está aprovado para uma entidade específica. Isso é distinto da autenticação, que verifica a identidade da entidade. É importante manter essas distinções em mente ao projetar e desenvolver uma solução de software. Este guia visa auxiliar os desenvolvedores na implementação de lógica de autorização robusta, apropriada ao contexto do aplicativo, mantível e escalável.

**Recomendações**:

1. **Aplicar Privilégios Mínimos**:
   - Atribuir aos usuários apenas os privilégios mínimos necessários para concluir seu trabalho. Isso deve ser aplicado horizontal e verticalmente.
   - Durante a fase de design, defina limites de confiança, identificando os tipos de usuários, recursos e operações que podem ser realizadas. Para sistemas ABAC, considere todas as categorias de atributos.
   - Crie testes para validar as permissões definidas no design.
   - Revise periodicamente as permissões para evitar o acúmulo de privilégios.

2. **Negar por Padrão**:
   - Adote uma mentalidade de "negar por padrão" para negar acesso, a menos que seja explicitamente concedido.
   - Evite depender apenas de regras explicitamente definidas.

3. **Validar as Permissões em Cada Solicitação**:
   - Valide as permissões em cada solicitação, usando tecnologias que permitam configurações globais.
   - Use filtros em Java/Jakarta EE, Middleware no Django Framework, .NET Core Filters ou Middleware no Laravel PHP Framework.

4. **Revisar Minuciosamente a Lógica de Autorização de Ferramentas e Tecnologias Escolhidas, Implementando Lógica Personalizada se Necessário**:
   - Avalie as vulnerabilidades de bibliotecas e frameworks utilizados, implementando lógica personalizada quando necessário.
   - Implemente uma defesa em profundidade, não dependendo apenas de uma única ferramenta.

5. **Preferir Controle de Acesso Baseado em Atributos e Relacionamentos sobre RBAC**:
   - Prefira ABAC e ReBAC sobre RBAC, pois eles oferecem suporte a lógica booleana complexa e são mais robustos.
   - ABAC e ReBAC são mais eficazes em aplicar o princípio de privilégios mínimos e suportam cenários de multi-inquilino e solicitações entre organizações.

6. **Garantir que os IDs de Busca não sejam Acessíveis Mesmo quando Adivinhados ou não Possam ser Manipulados**:
   - Evite expor identificadores internos de objetos, pois isso pode levar a violações de autorização.
   - Implemente referências indiretas específicas do usuário/sessão para objetos sensíveis.

7. **Aplicar Verificação de Autorização em Recursos Estáticos**:
   - Inclua recursos estáticos em políticas de controle de acesso, considerando o contexto dos dados expostos.
   - Proteja recursos estáticos usando a mesma lógica de controle de acesso usada para proteger outros recursos do aplicativo.

8. **Verificar se as Verificações de Autorização são Realizadas no Local Correto**:
   - Nunca confie em verificações de acesso do lado do cliente. Elas devem ser feitas do lado do servidor, no gateway ou usando funções sem servidor.

9. **Sair de Forma Segura Quando as Verificações de Autorização Falham**:
   - Manipule falhas de verificação de acesso de forma adequada, garantindo que não deixem o aplicativo em um estado imprevisível.

10. **Implementar Logs Adequados**:
   - Os logs são essenciais para a segurança da aplicação, ajudando na detecção de atividades maliciosas e em investigações pós-incidentes.
   - Registre informações consistentes e bem definidas que possam ser analisadas facilmente.

11. **Criar Casos de Teste de Unidade e Integração para Lógica de Autorização**:
   - Os testes de unidade e integração são essenciais para verificar se o aplicativo funciona conforme o esperado e para detectar falhas de segurança.
   - Automatize os testes para identificar rapidamente problemas de segurança durante o desenvolvimento.

Implementar essas recomendações pode ajudar a garantir que a lógica de autorização do aplicativo seja robusta e eficaz.